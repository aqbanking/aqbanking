<?xml?>

<tm2>
  <type id="AB_DOCUMENT" type="pointer">
    <descr>
    </descr>

    <lang id="c">
      <identifier>AB_DOCUMENT</identifier>
      <prefix>AB_Document</prefix>
      
      <baseFileName>document</baseFileName>
      
      <flags>
        with_xml
        with_db
        with_list1
        with_list2
        with_refcount
        with_hash
      </flags>
      
      <headers>
        <header type="sys" loc="pre">aqbanking/error.h</header>
        <header type="sys" loc="pre">gwenhywfar/types.h</header>
        <header type="sys" loc="pre">gwenhywfar/bindata.h</header>
        <header type="sys" loc="pre">gwenhywfar/base64.h</header>
      </headers>



      <inlines>

        <inline loc="end" access="public">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>
             $(api) int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>

             static $(struct_type) *$(struct_prefix)_List2__freeAll_cb($(struct_type) *t, void *user_data) {
               $(struct_prefix)_free(t);
               return NULL;
             }


             int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl) {
               if (tl) {
                 $(struct_prefix)_List2_ForEach(tl, $(struct_prefix)_List2__freeAll_cb, NULL);
                 $(struct_prefix)_List2_free(tl); 
               }
               else {
                 DBG_ERROR(AQBANKING_LOGDOMAIN, "List missing");
                 return GWEN_ERROR_INVALID;
               }
               return 0;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(api) void $(struct_prefix)_SetData($(struct_type) *st, const uint8_t *p, uint32_t len);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>

             void $(struct_prefix)_SetData($(struct_type) *st, const uint8_t *p, uint32_t len) {
               assert(st);
               if (st->data.length &amp;&amp; st->data.pointer)
                 free(st->data.pointer);
               if (p &amp;&amp; len) {
                 st->data.pointer=(uint8_t*) malloc(len); 
                 if (st->data.pointer) { 
                   st->data.length=len;
                   memmove(st->data.pointer, p, len); 
                 } 
                 else {
                   st->data.pointer=NULL;
                   st->data.length=0; 
                 } 
               }
               else {
                 st->data.length=0;
                 st->data.pointer=NULL;
               }
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(api) const uint8_t* $(struct_prefix)_GetDataPtr(const $(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>

             const uint8_t* $(struct_prefix)_GetDataPtr(const $(struct_type) *st) {
               assert(st);
               return st->data.pointer;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(api) uint32_t $(struct_prefix)_GetDataLen(const $(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             uint32_t $(struct_prefix)_GetDataLen(const $(struct_type) *st) {
               assert(st);
               return st->data.length;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(api) void $(struct_prefix)_SetAcknowledgeCode($(struct_type) *st, const uint8_t *p, uint32_t len);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>

             void $(struct_prefix)_SetAcknowledgeCode($(struct_type) *st, const uint8_t *p, uint32_t len) {
               assert(st);
               if (st->acknowledgeCode.length &amp;&amp; st->acknowledgeCode.pointer)
                 free(st->acknowledgeCode.pointer);
               if (p &amp;&amp; len) {
                 st->acknowledgeCode.pointer=(uint8_t*) malloc(len); 
                 if (st->acknowledgeCode.pointer) { 
                   st->acknowledgeCode.length=len;
                   memmove(st->acknowledgeCode.pointer, p, len); 
                 } 
                 else {
                   st->acknowledgeCode.pointer=NULL;
                   st->acknowledgeCode.length=0; 
                 } 
               }
               else {
                 st->acknowledgeCode.length=0;
                 st->acknowledgeCode.pointer=NULL;
               }
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(api) const uint8_t* $(struct_prefix)_GetAcknowledgeCodePtr(const $(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>

             const uint8_t* $(struct_prefix)_GetAcknowledgeCodePtr(const $(struct_type) *st) {
               assert(st);
               return st->acknowledgeCode.pointer;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(api) uint32_t $(struct_prefix)_GetAcknowledgeCodeLen(const $(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             uint32_t $(struct_prefix)_GetAcknowledgeCodeLen(const $(struct_type) *st) {
               assert(st);
               return st->acknowledgeCode.length;
             }
          </content>
        </inline>

      </inlines>


    </lang>

    <enums>

    </enums>

    <defines>

    </defines>


    <members>

      <member name="id" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>


      <member name="ownerId" type="uint32_t" maxlen="8">
        <descr>
          The meaning of this field depends on the type of document.
          For electronic statements this is the unique id of the account this statement belongs to.
        </descr>
        <default>0</default>
        <preset>0</preset>
        <access>public</access>
        <flags>with_hash</flags>
      </member>


      <member name="mimeType" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="filePath" type="char_ptr" maxlen="256" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="data" type="gwen_bindata" >
        <default>NULL</default>
        <preset>NULL</preset>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>omit</setflags>
        <getflags>omit</getflags>
      </member>


      <member name="acknowledgeCode" type="gwen_bindata" >
        <default>NULL</default>
        <preset>NULL</preset>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>omit</setflags>
        <getflags>omit</getflags>
      </member>


    </members>

    
  </type>
  
</tm2>

